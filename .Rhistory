submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
extract_numeric("class5")
submit()
submit()
submit()
students4
submit()
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status="passed")
failed <- mutate(failed, status="failed")
bind_rows(pass, ffailed
bind_rows(pass, failed)
bind_rows(pass, failed)
bind_rows(passed, failed)
sat
?select
?separate
submit()
?select
submit()
submit()
submit()
date()
Sys.timezone()
library(swirl)
swirl()
Sys.getlocale("LC_Time")
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = "lubridate")
help(package = lubridate)
this_day <- today
this_day <- today()
this_day
year(this_day)
wday(this_Day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
mydate <- ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
mdy(25081985)
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 14, miutes = 18, seconds = 30)
this_moment <- update(this_moment, hours = 14, minutes = 18, seconds = 30)
this_moment
nyc <- now()
nyc <- now("America/New_York")
nyc
depart
depart <- nyc + days(2)
depart
depart <- update(depart, hour = 17, minutes = 34)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Long")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval()
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
getwd()
swirl()
library(swirl)
swirl()
install_from_swirl("Exploratory_Data_Analysis")
library(swirl)
swirl()
head()
head(pollution)
dim(pollution)
sum(pollution$pm25)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = "blue")
?abline
boxplot(ppm, col = "blue")
abline(h = 12)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
albine(v=12)
albine(v = 12)
abline(v = 12)
abline(v = 12, lwd = 2)
abline(v = median(ppm), lwd = 4)
abline(v = median(ppm), lwd = 4))
abline(v = median(ppm), col = "magenta", lwd = 4))
abline(v = median(ppm), col = "magenta", lwd = 4))
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25~region, data = pollution, col = "red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
subset(pollution, pollution$region = "east")
subset(pollution, pollution$region=="east")
east <- subset(pollution, pollution$region=="east")
east <- subset(pollution,region=="east")
head(east)
hist(east$pm25, col = "green")
hist(subset(pollution$pm25,region=="east"), col = "green")
hist(pollution$pm25, data=subset(pollution,region=="east"), col = "green")
hist(subset(pollution,region=="west")$pm25, col = "green")
?with
with(pollution, plot(pm25, lattitude))
with(pollution, plot(pm25, latitude))
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, ppm, col = pollutant$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution,region=="west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
?Devices
plot(faithful, )
faithful
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
title(main = "Old Faithful Geyser data")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
"geyserplot.png"
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules"))
text(mean(cars$speed), max(cars$dist), "SWIRL rules")
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, state, layout = c(2,2))
head(mpg)
diim(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, date = mpg)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$ozone, na.rm = TRUE)
range(airquality$ozone, na.rm=TRUE)
range(airquality$ozone,na.rm=TRUE)
range(airquality$Ozone,na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, data=airquality)
library(swirl)
swirl()
boxplot(Ozone~Month, data=airquality, xlab="Month", ylab="Ozone (ppb)", col.axis="blue", col.lab="red")
title(main="Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$wind, airquality$Ozone, type = "n")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
may <- subset(airquality, months=5)
may <- subset(airquality, Months==5)
may <- subset(airquality, Month==5)
points(may$Wind, may$Ozone, col="blue")
points(may$Wind, may$Ozone, col="blue", pch=17)
notmay <- subset(airquality, Month!=5)
points(notmay$Wind, notmay$Ozone, col="red", pch=12)
points(notmay$Wind, notmay$Ozone, col="red", pch=8)
legend(topright, pch=c(17,8), col = c("blue", "red"), legend = c("May", "Other Months")
legend(topright, pch=c(17,8), col = c("blue", "red"), legend = c("May", "Other Months")
legend(topright, pch=c(17,8), col = c("blue", "red"), legend = c("May", "Other Months")
legend(topright, pch=c(17,8), col = c("blue", "red"), legend = c("May", "Other Months")
legend(topright, pch=c(17,8), col = c("blue", "red"), legend = c("May", "Other Months"))
?legend
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
may <- subset(airquality, months=5)
points(may$Wind, may$Ozone, col="blue", pch=17)
notmay <- subset(airquality, Month!=5)
points(notmay$Wind, notmay$Ozone, col="red", pch=8)
legend("topright", pch=c(17,8), col = c("blue", "red"), legend = c("May", "Other Months"))
abline(v=median(airquality$Wind), lty=2, lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone)
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar, main = "Ozone and Solar Radiation")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow=c(1,3), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main="Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main="Ozone and Solar Temperature")
plot(airquality$Temp, airquality$Ozone, main="Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = "TRUE")
mtext("Ozone and Weather in New York City", outer = TRUE)
library(swirl)
swirl()
head(airquality)
xyplot(Ozone ~ Wind, airquality)
xyplot(Ozone ~ Wind, airquality, col = "red", pch = "8", main = "Big Apple Data")
xyplot(Ozone ~ Wind, airquality, col = "red", pch= "8", main = "Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, col = "red", pch= "8", main = "Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch="8", col="red", main = "Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main = "Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout=c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout=c(5,1))
p <- xyplot(Ozone~Wind,data=qiarquality)
p <- xyplot(Ozone~Wind,data=airquality)
p
names(p)
mynames[myfulll]
mynames[myfull]
p[["forumla"]]
p[["formula"]]
p[["x.limit"]]
p[["x.limits"]]
table(f)
xyplot(y~x | f, layout=c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color diamonds$cut)
table(diamonds$color, diamonds$cut)
myedit(my.Labels.R)
myedit(myLabels.R)
myedit("myLabels.R")
source("myLabels.R")
pathtofile(source("myLabels.R"), local = TRUE)
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price~carat | color*cut, data=diamonds, strip = FALSE, pch=20, xlab = "myxlab", ylab = "myylab", main = "mymain")
xyplot(price~carat | color*cut, data=diamonds, strip = FALSE, pch=20, xlab=myxlab, ylab=myylab, main=mymain)
xyplot(price~carat | color*cut, data=diamonds, pch=20, xlab=myxlab, ylab=myylab, main=mymain)
sample(colors(), 10)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette("red", "yellow")
p2 <- colorRampPalette(c("red", "yellow")
p2 <- colorRampPalette(c("red", "yellow"))
p2 <- colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3 <- colorRampPalette(c("blue", "green"))
p3 <- colorRampPalette(c("blue","green"),alpha=.5)
p3(5)
plot(x, y, pch=19, col=rgb(0, 0.5, 0.5))
plot(x, y, pch=19, col=rgb(0, 0.5, 0.5, 0.3))
cols <- brewer.pal(3, "BuGn")
showMe(ccols
showMe(cols)
showMe(cols)
pal <- colorRampPalette(ccols
pal <- colorRampPalette(cols)
pal <- colorRampPalette(cols)
showme(pals20)
showMe(pals20)
showMe(pal(20))
image(volcano, col=pal(20))
image(volcano, col=p1(20))
str(mpg)
qplot(displ, hwy, mpg)
qplot
?qplot
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, color = "drv")
qplot(displ, hwy, data=mpg, color=drv)
qplot(displ, hwy, data=mpg, color=drv, geom=c("point", "smooth"))
qplot(y=hwy, data=mpg, color=drv)
myhigh
qplot(split=drv, hwy, data=mpg, geom = "boxplot")
qplot(drv, hwy, data=mpg, geom = "boxplot")
qplot(drv, hwy, data=mpg, geom = "boxplot", color="manufacturer")
qplot(drv, hwy, data=mpg, geom = "boxplot", color=manufacturer)
qplot(hwy, data=mpg, fill=drb)
qplot(hwy, data=mpg, fill=drv)
qplot(displ, hwy, data=mpg, facets=. ~ drv)
qplot
qplot(hwy, data=mpg, facets = . ~ drv)
qplot(hwy, data=mpg, facets = . ~ drv, binwidth=2)
qplot(hwy, data=mpg, facets = . ~ drv, binwidth = 2)
qplot(hwy, data=mpg, facets = drv ~ ., binwidth = 2)
qplot(displ, hwy, data=mp, geom = c("point", "smooth"), facets = . ~ drv, string = "loess")
qplot(displ, hwy, data=mpg, geom = c("point", "smooth"), facets = . ~ drv, string = "loess")
qplot(displ, hwy, data=mpg, geom = c("point", "smooth"), facets = . ~ drv, method.skeleton() = "loess")
qplot(displ, hwy, data=mpg, geom = c("point", "smooth"), facets = . ~ drv, method = "loess")
qplot(displ, hwy, data=mpg, geom = c("point", "smooth"), facets = . ~ drv, method = "loess")
qplot(displ, hwy, data=mpg, geom = c("point", "smooth"), facets = . ~ drv)
?qplot
qplot(displ, hwy, data=mpg, geom = c("point", "smooth"), facets = . ~ drv)
g <- ggplot(data=mpg, aes(displ, hwy))
summary(g)
g + geom_point()
g + geom_point() + geom_smooth
(g + geom_point()) + geom_smooth
(g + geom_point()) + geom_smooth()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth(method = lm)
g + geom_point() + geom_smooth(method = "lm")
?geom_curve
?geom_smooth
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv)
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv) + gtitle("Swirl Rule")
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv) + ggtitle("Swirl Rule")
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv) + ggtitle("Swirl Rules")
g + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ drv) + ggtitle("Swirl Rules!")
g + geom_point(color="pink", size=4, alpha=1/2)
g +  geom_point(size=4, alpha=1/2, aes(color=drv))
g + geom_point(aes(color=drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(color=drv), size=2, alpha=1/2) + geom_smooth(size=4, linetype=4, method="lm", se = FALSE)
g + geom_point(aes(color=drv), size=2, alpha=1/2) + geom_smooth(size=4, linetype=3, method="lm", se = FALSE)
g + geom_point(aes(color=drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type="l", ylim = c(-3,3))
g <- ggplot(testdat=testdat, aes(myx, myy))
g <- ggplot(data=testdat, aes(myx, myy))
g + geom_line()
g + geom_line() + ylim(-3, 3)
g + coord_cartesian(ylim = c(-3,3))
g + geom_line + coord_cartesian(ylim = c(-3,3))
g + geom_line() + coord_cartesian(ylim = c(-3,3))
g <- ggplot(mpg, aes(displ, hwy, color = factor(year))
g <- ggplot(mpg, aes(displ, hwy, color = factor(year)))
g <- ggplot(mpg, aes(displ, hwy, color = factor(year))
g <- ggplot(mpg, aes(displ, hwy, color = factor(year)))
g <- ggplot(mpg, aes(displ, hwy, color = factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size=2, color="black")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size=2, color="black") + labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
str(diamonds)
qplot(price, data=diamonds)
range(diamonds$price)
qplot(price, data=diamonds, binwidth=18947/30)
qplot(price, data=diamonds, binwidth=18497/30)
brk
counts
qplot(price, data=diamonds, binwidth=18497/30, fill=cut)
qplot(price, data=diamonds, geom = density
qplot(price, data=diamonds, geom = density)
qplot(price, data=diamonds, geom = density)
qplot(price, data=diamonds, geom = "density")
qplot(price, data=diamonds, geom = "density", color=cut)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, shape=cut)
qplot(carat, price, data=diamonds, color=cut)
qplot(carat, price, data=diamonds, color=cut, geom = c("point", "smooth"))
qplot(carat, price, data=diamonds, color=cut, geom = c("point", "smooth"), method = "lm")
qplot(carat, price, data=diamonds, color=cut) + geom_smooth(method = "lm")
carat,price,data=diamonds, color=cut, geom
| =c("point","smooth"),method="lm")
qplot(carat,price,data=diamonds, color=cut, geom = c("point","smooth"),method="lm")
qplot(carat, price, data=diamonds, color=cut, facets = .~cut + geom_smooth(method = "lm")
qplot(carat, price, data=diamonds, color=cut, facets = .~cut) + geom_smooth(method = "lm")
qplot(carat, price, data=diamonds, color=cut, facets = .~cut) + geom_smooth(method = "lm")
g <- ggplot(diamonds, aes(depth, price))
g
summary(g)
g + geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$carat, seq(0, 1, length(4), na.rm = TRUE)
cutpoints <- quantile(diamonds$carat, seq(0, 1, length(4), na.rm = TRUE))
cutpoints <- quantile(diamonds$carat, seq(0, 1, length(4), na.rm = TRUE))
cutpoints <- quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha=1/3) + facet_grid(cut ~ car2)
diamonds[myd,]
g + geom_point(alpha=1/3) + facet_grid(cut ~ car2) + geom_smooth(method = "lm", size=3, color="pink")
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(. ~ ccut()
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(. ~ cut)
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(. ~ cut)
library(nlme)
library(lattice)
xplot(weight ~ Time | Diet, BBodyWeight
xplot(weight ~ Time | Diet, BodyWeight)
xplot(weight ~ Time | Diet, BodyWeight)
xyplot(weight ~ Time | Diet, BodyWeight)
str(nlme)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
#R Script for Class Project Week 1 - Exploratory Data Analysis
#Get and set working directory where Electronic Power Consumption Data is Located
getwd() #Locating current working directory
setwd("Exploratory") #Setting directory where data is located; modify as necessary
#Read in Electric Power Consuption data
data <- read.table("household_power_consumption.txt", header = TRUE, sep = ";", na.strings = "?")
head(data)
str(data)
#Date frame looks good
#Reformat date and time variables
##Date
class(data$Date) # Check class of date variable
data$Date <- as.character(data$Date) # Convert to character
#Time
class(data$Time) #Check class of time variable
data$Time <- as.character(data$Time) # Convert to character
#Create a separate date variable and a variable with the day
data$Dates <- as.Date(data$Date, format = "%d/%m/%Y")
#Create a single character vector with date and time
data$DateTime <- paste(data$Date, data$Time, sep = " ")
#Convert data-time variable to POSIXlt
data$Dated <- strptime(data$DateTime, "%d/%m/%Y %H:%M:%S") # Convert to date
head(data$Dated) #Checking date
#Subset dataframe to dates 2007-02-01 and 2007-02-02
subdfone <- subset(data, data$Dates == "2007-02-01") #subset based on first date
subdftwo <- subset(data, data$Dates == "2007-02-02") #subset based on second data
dfplots <- rbind.data.frame(subdfone, subdftwo) #Append two subsetted data frames
#Make Fourth Plot -- Connected Line Plots for Various Relationships
#Create plot with four graphs; plot data with default axes
#Set screen device parameters
par(mfrow=c(2,2)) #Screen device with two rows and columns
par(mar=c(4, 5, 1, 4.5)) #Reset margins
par(cex.lab=0.8, cex.axis=0.8) #Resize font size for axis label and tick marks
#First Plot
with(dfplots, plot(Dated, Global_active_power, type = "l", ylab = "Global Active Power", xlab=""))
#Second Plot
with(dfplots, plot(Dated, Voltage, type = "l", ylab = "Voltage", xlab="datetime"))
#Third Plot
with(dfplots, plot(Dated, Sub_metering_1, type="n", axes = TRUE, ylab = "Energy sub metering", xlab = ""))
with(dfplots, lines(Dated, Sub_metering_1, col="black"))
with(dfplots, lines(Dated, Sub_metering_2, col="red"))
with(dfplots, lines(Dated, Sub_metering_3, col="blue"))
legend("topright", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),
col = c("black","red","blue"), lty = c(1,1,1), cex=0.75, bty="n")
#Fourth Plot
with(dfplots, plot(Dated, Global_reactive_power, type = "l", ylab = "Global Reactive Power", xlab="datetime"))
#Copy graph in screen device to PNG file
setwd("ExData_Plotting1") #Change working directory to location of github repo
dev.copy(png, "plot4.png") #Copy to PNG device
dev.off() #Finished!
